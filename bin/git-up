#!/bin/bash
# Usage: git up [options] <stage> [commit-ish]
# Deploy commit to production servers
# --help        : this help
# --force		: ...
# --check		: check before and display diff
# --info		: get current working tree infos
# --debug       : for bug fixing (please use it for issues)
#
#With options:
#    <stage> hotfix          : quick hotfix
#    <stage> release         : new release
#    <stage> revert TOREF    : revert <stage> to TOREF
#    <stage> diff            : diff between stage and your HEAD
#    <stage> whatchanged     : whatchanged between <stage> and your HEAD
#    <stage> sync REF        : re-sync prod or preprod to REF
#
#TIPS:
#    <stage> hotfix -p       : params -* are passed to git log
#
#SPECIALS:
#    self-update             : self-update :)
#    update-hooks            : only update local hooks
#
# https://github.com/mathroc/git-up


set -e
shopt -s xpg_echo


#
# CONFIG
#
# Search git-up on those remotes :
remotes=$(git config --get up.remotes || echo "upstream origin")
public_remotes=( github.com bitbucket.org )
sshopts="-x -A"
git_config_up_host="up.host"
needupdatevar="up.need-update"
remoteuri=
remote=
sshhost=
reponame=
repolongname=
#LANG=en_US.UTF-8
stage=
debug=0 # --debug
check=0
force=0
diff=0
upopts=
infosonly=0
commitish=
commitset=0
newtag=
hotfix=1
release=0
revertto=
resync=0
deploymsg=
GITROOT=

#
# FUNCTIONS
#

Usage() {
	{ sed -n -e '/^# Usage:/,/^$/ s/^# \?//p' < $0; exit; }
}

error() {
	echo "\033[41m\033[1;33mCRITICAL: $@\033[0m"
	exit 42
}
warn () {
	echo "\033[41m\033[1;33mWARNING: $@\033[0m"
}

info () {
	echo "\033[44m\033[1;36m$@\033[0m"
}

msg () {
	echo "\033[40m\033[1;36m$@\033[0m"
}

msgy () {
	echo "\033[40m\033[1;33m$@\033[0m"
}

debug() {
	if [ $debug -gt 0 ]
	then
		local d=$( date -R 2>/dev/null )
		[ -z "$d" ] && d="$( date )"
		echo "% DEBUG: [$( date )] >>> $@" >&2
	fi
}

check_prerequisites() {
	for tool in ssh awk grep git
	do
		if ! type $tool >/dev/null
		then
			error "the tool '$tool' is required."
		fi
	done
	if [ -z "$GITROOT" ]
	then
		error "Called from outside a git repository."
	fi
}


is_not_a_public_git_hoster() {
	local rh="$1"
	rh=${rh##*@}
	for rt in ${public_remotes[@]}
	do
		if grep -qF "$rt" <<< "$rh"
		then
			return 1
		fi
	done
	return 0
}


get_remote_from_config() {
	sshhost="$( git config --get $git_config_up_host || true )"
}


get_remote() {
	get_remote_from_config
	for search in $remotes
	do
		if git remote show -n | grep -q "^$search$"
		then
			remote="$search"
			remoteuri=$( LANG=C git remote show -n "$search" | grep "Fetch URL" | awk '{print $3}' )

			local shost=${remoteuri%:*}
			#if is_not_a_public_git_hoster $shost
			#then
			#	true
			#	#sshhost="$shost"
			#else
			#fi
			upopts="--remote $remoteuri $upopts"

			reponame=${remoteuri##*:}
			repolongname="$reponame"
			#repolongname=${repolongname%%.git}
			# remove port:
			repolongname=${repolongname#[0-9]*/}
			reponame=${reponame##*/}
			reponame=${reponame%%.git}
			return
		fi
	done
	error "Remote not found."
}


check_connection() {
	echo -n "Try to connect to $sshhost ... "
	ssh $sshopts $sshhost up test
	echo OK.
}


up_to_date() {
	git fetch --quiet --tags origin

	local needupdate=0
	local lastucvar="up.last-update-check"
	local tmpscript="/tmp/git-$lastucvar.$$"
	local lastuc=$( git config --get $lastucvar || true )

	if [ -n "$lastuc" ]
	then
		if [ "$(( $( date +%s ) - $lastuc ))" -gt 3600 ]
		then
			needupdate=1
		fi
	else
		needupdate=1
	fi

	if [ $needupdate -gt 0 ]
	then
		git config --global $lastucvar $( date +%s )
		if curl -o "$tmpscript" -sSL https://raw.githubusercontent.com/mathroc/git-up/master/bin/git-up
		then
			if ! diff -q "$0" "$tmpscript" >/dev/null
			then
				git config --global $needupdatevar yes
			else
				git config --global $needupdatevar no
			fi
		else
			warn "github.com seems down..."
		fi
	fi

	#git config --global --unset $lastucvar
}


install_hooks() {
	for hook in $( dirname $0 )/hooks/*
	do
		local hk=$( basename $hook )
		local mustbeinstalled=0
		local dst="$GITROOT/.git/hooks/$hk"
		if [ ! -h "$dst" ]
		then
			mustbeinstalled=1
		else
			local linkedto=$( readlink -f "$dst" 2>/dev/null )

			# OSX compatibility ...
			if [ "$linkedto" = "" ]
			then
				linkedto=$( python -c "import os; print(os.path.realpath('$dst'))" )
			fi

			if [ "$linkedto" != "$hook" ]
			then
				mustbeinstalled=1
				rm -f "$dst"
			fi
		fi
		if [ -f "$dst" ] && [ ! -h "$dst" ]
		then
			echo "Warning: remove $dst"
			ls -l $dst
			rm -f "$dst"
			mustbeinstalled=1
		fi
		if [ $mustbeinstalled -gt 0 ]
		then
			echo "- install hook $hk"
			ln -s "$hook" "$dst"
		fi
	done
}


get_next_tag() {
	local autotag="$( dirname $0 )/autotag.pl"
	if type perl >/dev/null && [ -e $autotag ]
	then
		autotag="perl $autotag"
	else
		msgy "hint: install Perl for better performance ;)" >&2
		autotag="ssh $sshopts $sshhost up autotag"
	fi
	debug "autotag: $autotag"
	debug "hotfix=$hotfix release=$release pattern=$tag_pattern"

	# without tag pattern, grep all
	if [ -z "$tag_pattern" ]
	then
		tag_pattern=".*"
	fi

	if [ $hotfix -gt 0 ]
	then
		newtag=$( git tag -l | grep -E "$tag_pattern" | $autotag --nofetch --short )
	elif [ $release -gt 0 ]
	then
		newtag=$( git tag -l | grep -E "$tag_pattern" | $autotag --nofetch --short --release )
	fi
}

fetch_info() {
	msg ">>> Connect to remote $sshhost ..."
	local infofile="/tmp/${USER}.git-up-info.$$"
	if ssh $sshopts $sshhost up $upopts "$repolongname" $stage --init "$commitish" infos >$infofile
	then
		. $infofile
		if [ $debug -gt 0 ]
		then
			debug "----------------------------"
			cat $infofile >&2
			debug "----------------------------"
		fi
		rm -f $infofile
	else
		cat $infofile
		rm -f $infofile
		chead=
	fi

	if [ -z "$chead" ]
	then
		error "Failed to get current ref for <$stage>"
	fi

	local blockcolor="\033[44m\033[1;37m"
	if [ -n "$color" ]
	then
		blockcolor="$color"
	fi
	echo -n $blockcolor
	echo -n "|--------------------------------------------------------------------|"
	echo "\033[0m"

	echo -n $blockcolor
	echo -n "|                                                                    |\r"
	echo -n "| $repolongname <$stage> is on "
	if [ ${#cpretty} -gt 12 ]
	then
		echo "\033[0m"

		echo -n $blockcolor
		echo -n "|                                                                    |\r"
		echo -n "| $cpretty"
	else
		echo -n "$cpretty"
	fi
	echo "\033[0m"

	echo -n $blockcolor
	echo -n "|                                                                    |\r"
	echo -n "| >> deploying $commitish <<"
	echo "\033[0m"

	echo -n $blockcolor
	echo -n "|--------------------------------------------------------------------|"
	echo "\033[0m"
}


check_pushed() {
	local ref=$( git rev-parse $commitish )
	local plural=
	local commits=$( git cherry | wc -l )

	if [ $commits -eq 0 ]
	then
		return 0
	fi

	if [ "$1" = "strict" ] || git cherry 2>/dev/null | grep -q "$ref$"
	then
		if [ $commits -gt 1 ]
		then
			plural="s"
		fi
		error "You have to push your commit$plural ! ($commits commit$plural waiting to be pushed)"
	fi
}

resync() {
	echo deploying "$commitish" on "$repolongname":$stage
	set +e
	echo "$deploymsg" | ssh $sshopts $sshhost up $upopts "$repolongname" $stage sync "$commitish"
	# sometimes ssh exists with return code 1 without any errors, even when
	# "up ... sync" command exits with 0.
	# ugly hack, but in case of an error with "up" command, it doesn't return 1
	# but a bigger number.
	local retsshcode=$?
	set -e
	if [ $retsshcode -eq 1 ]
	then
		return 0
	else
		return $retsshcode
	fi
}


gitdiff() {
	local diff=$1
	shift
	local d1=HEAD
	if [ -n "$1" ]
	then
		d1="$1"
		shift
	fi
	local d2="$chead"

	if [ "$d1" = "$cpretty" ]
	then
		return
	fi

	msg "[$stage] DIFF: $@ $d2..$d1"
	if [ $diff -eq 1 ]
	then
		git diff $@ $d2 $d1
	elif [ $diff -eq 2 ]
	then
		git whatchanged --stat --format="%Cred author : %an --- %Cgreen date :  %ad" $@ $d2..$d1
	elif [ $diff -eq 3 ]
	then
		git log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' $@ $d2..$d1 || true
	fi
}


GITROOT=$( git rev-parse --show-toplevel )
gitopts=""
while [ $# -gt 0 ]
do
	case "$1" in
		hotfix) # default ...
			hotfix=1
			release=0
			;;
		release)
			release=1
			hotfix=0
			;;
		revert|sync)
			release=0
			hotfix=0
			resync=1
			;;
		diff)
			diff=1
			;;
		whatchanged)
			diff=2
			;;
		--check)
			check=1
			;;
		--force)
			force=1
			;;
		--help)
			Usage
			;;
		help)
			Usage
			;;
		--debug)
			debug=1
			upopts="--debug $upopts"
			;;
		--info)
			infosonly=1
			;;
		--message|-m)
			deploymsg=$2
			shift
			;;
		self-update)
			install_dir="$( dirname $0 )"
			if [ -z "$install_dir" ] || [ ! -d "$install_dir" ]
			then
				echo "Current install-dir not found ($install_dir)."
				exit 2
			fi

			setupopts=
			if ! git config --global alias.up >/dev/null
			then
				setupopts="--no-alias"
			fi

			echo "Self-update in $install_dir ..."
			if ! curl -sSL https://raw.githubusercontent.com/mathroc/git-up/master/bin/setup | sh -s -- --install-dir	"$install_dir" $setupopts
			then
				error "Self-update FAILED!"
			else
				git config --global $needupdatevar no
			fi
			exit 0
			;;
		update-hooks)
			install_hooks
			exit
			;;
		# git opts
		-*)
			gitopts="$gitopts $1"
			;;
		*)
			if [ -z "$stage" ]
			then
				stage="$1"
			elif [ -z "$commitish" ]
			then
				commitish="$1"
				commitset=1
			else
				Usage
			fi
			;;
	esac
	shift
done

if [ -z "$stage" ]
then
	#Usage
	stage=preprod # default stage
fi
if [ -z "$commitish" ]
then
	commitish=origin/master
	commitset=0
fi

check_prerequisites

get_remote

if [ -z "$sshhost" ]
then
	warn "You have to configure git-up deploy server:"
	msgy "$ git config --global $git_config_up_host YOUR_SSH_HOST.TLD"
	exit 8
fi

#check_connection

#up_to_date

fetch_info

if [ $debug -gt 0 ]
then
	msgy "-------------------"
	echo stage=$stage
	echo repo=$reponame
	echo repolong=$repolongname
	echo remoteuri=$remoteuri
	echo remote=$remote
	echo branch_name=$branch_name
	echo tag=$tag
	echo tag_pattern=$tag_pattern
	echo "-------------------"
	echo hotfix=$hotfix
	echo release=$release
	echo diff=$diff
	msgy "-------------------"
fi


if [ $infosonly -gt 0 ]
then
	exit 0
fi


if [ -n "$allow_auto_deploy_message" ] && [ $allow_auto_deploy_message -eq 0 ] && [ "$stage" = "$tag_stage" ]
then
	blockcolor="\033[44m\033[1;37m"

	deploymsgvalid=0
	if [ -n "$deploymsg" ]
	then
		deploymsgvalid=1
	else
		echo -n $blockcolor
		echo ">--------------------------------------------------------------------<"
		#echo "\033[0m"
		echo -n -e "$deploy_message_prompt"
		echo "\033[0m"
	fi
	while [ $deploymsgvalid -eq 0 ]
	do
		echo -n "Message: "
		deploymsg=
		while read line
		do
			[ -z "$line" ] && break
			deploymsg="$deploymsg$line\n"
		done
		if [ -n "$deploymsg" ]
		then
			deploymsgvalid=1
			echo -n $blockcolor
			echo -n "Message OK."
			echo "\033[0m"
		fi
	done
fi

resync
