#!/bin/bash


set -e
shopt -s xpg_echo
cd $( dirname $0 )

GITUPVERSION=2
postreceivehook="../../.gitolite/hooks/common/post-receive"
repositories=
provisiondir=
repo=
stage=
commitish=
defaultconfdir=../conf.d
orgconfdir="../../git-up-config"
debug=0
quick=0
sync_to=
config_loaded=0
remote=
deployuser=
lockfile_delay=0


# GIT INFOS
chead=
ctag=
cpretty=
gitdir=
gitopts=
NOREV="0000000000000000000000000000000000000000"


error () {
	echo "\033[41m\033[1;33mCRITICAL: $@\033[0m" >&2
}

warn () {
	echo "\033[41m\033[1;33mWARNING: $@\033[0m" >&2
}

info () {
	echo "\033[44m\033[1;36m$@\033[0m" >&2
}

msg () {
	echo "\033[40m\033[1;36m$@\033[0m" >&2
}

msgy () {
	echo "\033[40m\033[1;33m$@\033[0m" >&2
}

debug() {
	if [ $debug -gt 0 ]
	then
		echo "# DEBUG: [$( date -R )] <<< $@" >&2
	fi
}

is_gitolite() {
	if [ -n "$GL_USER" ]
	then
		return 0
	fi
	return 1
}

is_gitlab() {
	getent passwd gitlab
	return $?
}


get_conf() {
	# do not reparse every time
	if [ $config_loaded -eq 0 ]
	then
		config_loaded=1
		local n=0
		# Example: fetch or update config files
		hook pre_conf

		if [ ! -d "$orgconfdir" ]
		then
			warn "You should add your organization and projects specific config files in $orgconfdir."
		else
			debug "Update internal git-up config repository ($PWD/$orgconfdir)"
			# can't use --work-tree parameter as we are in a git repository ...
			# so I use a subshell
			( unset GIT_DIR; cd $orgconfdir && git pull $( test $debug -eq 0 && echo -q ) --ff-only origin master )  >&2
		fi

		for confdir in $defaultconfdir $orgconfdir
		do
			for conffile in defaults.cfg organization.cfg ${repo}.default.cfg ${repo}.cfg
			do
				local cnf=$confdir/$conffile
				if [ -e $cnf ]
				then
					local cnf_secured=
					debug "Parse #$n $cnf"
					if grep -Ev '^#|^$|^declare|^[^ ]*=[^;]*' "$cnf" >&2
					then
						cnf_secured="/tmp/$( basename $cnf ).secured"
						warn "Config file '$cnf' is unclean, cleaning it ..."
						grep -E '^#|^declare|^[^ ]*=[^;&]*'  "$cnf" >$cnf_secured
						cnf="$cnf_secured"
					fi

					source "$cnf"
					n=$(( $n + 1 ))

					if [ -n "$cnf_secured" ]
					then
						debug "Removing temporary secured cnf: $cnf_secured"
					fi
				fi
			done
		done

		hook post_conf
	fi
}

# Hook from this repository, or config repo
hook() {
	if [ -n "$1" ] && [ $quick = 0 ]
	then
		local hookname="$1"
		shift
		local hookfile=
		# Can't get conf on pre_conf hook
		if [ "$hookname" = "pre_conf" ]
		then
			hookfile="../hooks/pre_conf"
		# any other hooks:
		else
			get_conf
			hookfile="${!hookname}"
			export GITUP_DOCKER_REGISTRY_USER=$docker_registry_user
			export GITUP_DOCKER_REGISTRY_TOKEN=$docker_registry_token
			export GITUP_DOCKER_REGISTRY=$docker_registry
			export GITUP_DOCKER_IMAGE_PHP=$docker_image_php
		fi
		debug "hook '$hookname' ?"
		if [ -n "$hookfile" ]
		then
			for hookscript in "$hookfile" "$orgconfdir/$hookfile"
			do
				if [ -x "$hookscript" ]
				then
					debug "Call hook: $hookscript $stage $repo $gitdir $@"
					$hookscript $stage $repo $gitdir "$@" || exit $?
				else
					debug "hook $hookname => '$hookscript' : script not found."
				fi
			done
		fi
	fi
}

# Local to the deployed repository
local_hook() {
	local hook="$1"
	shift
	if [ -n "$hook" ] && [ $quick = 0 ]
	then
		if [ -d "$gitdir" ]
		then
			if [ -x "$gitdir/$local_hooks_dir/$hook" ]
			then
				debug "Call hook: $hook"
				# Call it inside a subshell
				( cd "$gitdir" && $local_hooks_dir/$hook $stage $repo "$@" )
			else
				debug "hook $1 => '$local_hooks_dir/$hook' : script not found."
			fi
		else
			warn "No gitdir ? WTF ?? [$gitdir]"
		fi
	fi
}

do_update() {
	get_conf
	debug "do auto-update: $do_auto_update_each"
	if [ -n "$do_auto_update_each" ] && [ $do_auto_update_each -gt 0 ]
	then
		# TODO: flag + check last update
		cd ..
		debug "self-update"
		hook pre_self_update
		git pull
		if is_gitolite
		then
			if diff -q hooks/post-receive $postreceivehook
			then
				echo "Updating gitolite post-receive hook."
			#	cp -a hooks/post-receive $postreceivehook
			fi
		elif is_gitlab
		then
			warn "GITLAB is not yet supported."
		fi
		debug "self-update done."
		hook post_self_update
	else
		error "auto-update is disabled"
	fi
	exit 0
}

setup_provision() {
	get_conf
	if is_gitolite
	then
		repositories="$GL_REPO_BASE_ABS"
		provisiondir="$GL_REPO_BASE_ABS/../provisioning/$stage"
	elif is_gitlab
	then
		error "GITLAB is not yet supported."
	else
		provisiondir="../../provisioning/$stage"
	fi

    gitdir="$provisiondir/$repo"
	#if [ -n "$destination_dir" ]
	#then
	#	gitdir="$provisiondir/$destination_dir"
	#else
	#	gitdir="$provisiondir/$repo"
	#fi

	check_repo

	if [ ! -d "$provisiondir" ]
	then
		debug "mkdir $PWD/$provisiondir"
		mkdir -p "$provisiondir"
	fi

	local cloned=0
	if [ ! -d "$gitdir" ]
	then
		local cloneopts=
		if [ -z "$remote" ] && [ -d "$repositories/${repo}.git/" ]
		then
			remote="$repositories/${repo}.git/"
			cloneopts="-l -q"
		fi
		msgy "DEBUG: clone dest = '$destination_dir'"
		msgy "Clone $repo from $remote, please wait ..."
		msgy "git clone $cloneopts $remote $gitdir"
        echo "Clone $repo from $remote / git clone $cloneopts $remote $gitdir" | mail -s "$repo cloned" greg@easyflirt.com

		if ! git clone $cloneopts $remote $gitdir >&2
		then
			echo "# FATAL: unable to clone $repo."
			exit 5
		fi
		cloned=1
	fi

	export GIT_WORK_TREE="$PWD/$gitdir"
	export GIT_DIR="$PWD/$gitdir/.git"
	debug "work-tree=$GIT_WORK_TREE"

	# init on commitish if cloned
	if [ $cloned -gt 0 ]
	then
		msg "Initialize to $commitish"
		git checkout $( test $debug -eq 0 && echo -q ) -f $commitish
	fi
}

provision() {
	debug "git fetch"
	git remote prune origin >/dev/null
	git fetch    $( test $debug -eq 0 && echo -q ) origin --tags                                         # fetch tags
	git fetch    $( test $debug -eq 0 && echo -q ) origin                                                # fetch branches
	git fetch -f $( test $debug -eq 0 && echo -q ) origin "refs/pull/*/head:refs/remotes/pr/*"           # fetch GitHub Pull-Requests
	git fetch -f $( test $debug -eq 0 && echo -q ) origin "refs/merge-requests/*/head:refs/remotes/mr/*" # fetch GitLab Merge-Requests
	debug "git fetch done."
}

get_current_state() {
	chead="$( git rev-parse HEAD )"
	set +e
	# On which branch am I ?
	cbranch=$( git branch -r --contains $chead | head -1 | sed "s/^[[:space:]]\+//" | awk '{print $3}' | cut -d/ -f2- )
	if [ -z "$cbranch" ]
	then
		cbranch=$( git branch -r --contains $chead | head -1 | sed "s/^[[:space:]]\+//" | awk '{print $1}' | cut -d/ -f2- )
	fi
	debug "cbranch=$cbranch"
	if [ -n "$cbranch" ]
	then
		cpretty="$cbranch"
	else
		cpretty="$chead"
	fi
	ctag="$( git describe --tags --exact-match $chead 2>/dev/null )"
	if [ -n "$ctag" ]
	then
		cpretty="$ctag"
	fi
	debug "cpretty=$cpretty chead=$chead ctag='$ctag'"
	set -e
}


do_guess() {
	local branch=$1
	local tag=$2
	get_conf

	local stage=

	# From post-receive hook, $branch can be empty if there is only a tag
	if [ -z "$tag" ]
	then
		tag="$branch"
	fi

	debug "Guess with tag=$tag and branch=$branch"

	# First, we guess on tags
	if [ -n "$tag" ]
	then
		if [ $tag_enabled -gt 0 ]
		then
			debug "pattern: $tag_pattern"
			if grep -Eq "$tag_pattern" <<< "$tag"
			then
				stage=$tag_stage
			fi
		fi
	fi

	# if not found, guess on branch
	if [ -z "$stage" ] && [ -n "$branch_name" ] && [ "$branch" = "$branch_name" ] && [ -n "$branch_to_stage" ]
	then
		stage=$branch_to_stage
	fi

	debug "found stage=$stage"

	# Found, now check that this stage is allowed
	if [ -n "$stage" ]
	then
		if is_stage_allowed $stage
		then
			echo "stage='$stage'"
			exit 0
		fi
	fi
	exit 17
}



do_infos() {
	setup_provision
	provision
	get_current_state

	if [ $tag_enabled -gt 0 ] && [ -n "$tag_stage" ] && [ "$tag_stage" = "$stage" ]
	then
		debug "Stage <$stage> is configured on tags."
		echo "tag=1"
		echo "tag_pattern='$tag_pattern'"
	else
		echo "tag=0"
	fi
	echo "allow_auto_deploy_message=$allow_auto_deploy_message"
	echo "deploy_message_prompt=\"$deploy_message_prompt\""
	echo "branch_name='$branch_name'"
	echo "branch_stage='$branch_stage'"
	echo "tag_stage='$tag_stage'"
	local color="color_$stage"
	echo -E "color='${!color}'"

	echo "chead='$chead'"
	echo "ctag='$ctag'"
	echo "cpretty='$cpretty'"
	exit 0
}

check_repo() {
	if [ -z "$repo" ]
	then
		error "repository not found."
		exit 6
	fi
	if [ -z "$stage" ]
	then
		error "stage not found."
		exit 7
	fi

	get_conf

	if is_repo_allowed $repo
	then
		if is_stage_allowed $stage
		then
			return 0
		else
			error "Stage <$stage> is not allowed."
		fi

		if [ -d "$gitdir" ]
		then
			warn "git dir '$gitdir' exists, removing it."
			rm -rf "$gitdir"
		fi
	else
		warn "Deployment of repository <$repo> is disabled."
	fi
	exit 8
}


is_stage_allowed() {
	local stage_to_check=$1
	local allowed_stage=
	for allowed_stage in ${allowed_stages[*]}
	do
		if [ "$stage_to_check" = "$allowed_stage" ]
		then
			return 0
		fi
	done
	return 1
}

is_repo_allowed() {
	local repo_to_check=$1
	local disabled_repo=
	for disabled_repo in ${repositories_disabled[@]}
	do
		if [ "$disabled_repo" = "$repo_to_check" ]
		then
			return 1
		fi
	done
	return 0
}

# Can't use cfg_parser, it's not a real INI file ...
parse_ansible_hostfile() {
	local hostfile="$1"
	#local lansible=$ansible
	#if [ -z "$lansible" ]
	#then
	#	lansible="ansible" # took from $PATH
	#else
	#	# quick hack...
	#	if [ -z "$PYTHONPATH" ]
	#	then
	#		export PYTHONPATH="$( dirname $lansible )/../lib"
	#		debug "PYTHONPATH=$PYTHONPATH"
	#	fi
	#fi
	#debug "Call ansible: $lansible"
	#local hosts=$( $lansible --inventory "$hostfile" --list-hosts $repo | awk '{print $1}' )
	local hosts=$( awk '/\['$repo'\]/ { f=1; next; } /\[/ {f=0; next;} /./ && f {print $1}' < "$hostfile" )

	debug "Hosts found: $hosts"
	# master is first if not already setup
	for h in "$hosts"
	do
		if [ -z "$master" ]
		then
			master="$h"
		elif [ -z "$servers" ]
		then
			servers="$h"
		else
			servers="$servers,$h"
		fi
	done
}


set_lockfile() {
    lockfile="/tmp/git_up_deploy_${stage}_$( echo $repo | tr "/" "_" ).lock"
}

get_lockfile_delay() {
	local temporize=$( get_stage_var temporize )
    local lastm=$( stat -c %Y $lockfile )
    local now=$( date +%s )
    local td=$(( $now - $lastm ))
    lockfile_delay=$(( $temporize - $td ))
}


wait_for_lock() {
	set_lockfile
	debug "check lock: $lockfile"

	trap cleanup INT QUIT TERM EXIT

	# LOCK
	while [ -e $lockfile ]
	do
        get_lockfile_delay

        # bug protection
		if [ $lockfile_delay -gt 7200 ]
		then
			warn "Lock file too old (2h), removing it..."
			rm -f $lockfile
		fi

		if [ $lockfile_delay -gt 0 ]
        then
            cat $lockfile
            echo "$lockfile_delay sec to wait ..."
            sleep 1
        else
            rm -f $lockfile
        fi
	done

}


get_user() {
    if [ -n "$deployuser" ]
    then
        echo "$deployuser"
	elif is_gitolite
	then
		echo $GL_USER
	elif is_gitlab
	then
		echo "GITLAB_USER"
	else
		echo "unknown"
	fi
}

is_super_user() {
	local me=$( get_user )
	local u=
	get_conf
	for u in ${superusers[@]}
	do
		if [ "$u" = "$me" ]
		then
			debug "$u is a super user."
			return 0
		fi
	done
	return 1
}

create_lock() {
	set_lockfile
	echo "\033[43m\033[1;31m$( get_user ) has deployed '$repo' in $stage on commit $commitish$sync_to, please wait ...\033[0m" > $lockfile
}


cleanup () {
	local file=
	for file in $difffile
	do
		test -e $file && rm -f $file
	done
}

# The below is an alternative to readlink -fn which doesn't exist on OS X
# Source: http://stackoverflow.com/a/1678636
#FULL_PATH=`python -c "import os; print(os.path.realpath('$HACKING_DIR'))"`


get_stage_var() {
	local var="$1"
	local varname="$var"
	local val=${!varname}

	# Override with stage_ vars
	varname="${stage}_$var"
	local stageval=${!varname}
	if [ -z ${stageval-x} ] 2>/dev/null # check that $stageval is set
	then
		debug "$varname is not set"
	else
		val=$stageval
	fi

	echo $val
}


notify_deploy() {
	local repo=$1
	local stage=$2
	local user=$3
	local master=$4
	local before=$5
	local after=$6
	local sto=$7
	local deploymsg="$8"
    quick=0

	local notify_msg_file=$( mktemp /tmp/notify_msg_file.XXXXX )
	echo "$deploymsg" > $notify_msg_file
	hook "notify_deploy" $before $after $( get_user ) $notify_msg_file
	rm $notify_msg_file
}

do_sync() {
	setup_provision
	wait_for_lock
	create_lock

	debug "Prepare to deploy ..."

    if [ -e /tmp/no-deploy.flag ]
    then
        cat /tmp/no-deploy.flag
        exit 42
    fi

	# Not at Christmas {{{
    if [ "$( date +%d-%m )" = "24-12" ] && [ "$stage" = "prod" ]
    then
        echo "\033[40m\033[1;31m" >&2
        cat <<EOF >&2
                           .
                          /)\\
                         / ( )
                        /  ( (
                       /   |) \\
                      /    | ( )
                 ,=*""*=,_ |  )(
                /         "*, ( )
   /\\          ( ___         =  (
  (  )         ."   "*=,      \\  )
 ( '- )       /  ,,     "*=_  ;
( '-._ )      ;  *@    ,,   \\/
('-._  )      ;     ,  @*   ;          Sorry, it's Christmas 🎅
[------]      \\             ;
[____  ]       \\  *===*    /
 \\__  /         ",       ,"
  |\\ |        ,=*        *=,
  |\\\\|      ," .          . ",        /\\
  |_C"=._,-" /"            "\\ \\     .=""=.
 (  \\\\      /                \\ \\   /\\ /\\ /\\
 (__)|.___.,|  *   .  .   *  |  ",|  |  |  |
  |\\ |       >.__,="  "=,__.<,     \\/ \\/ \\/
  |\\\\|       \\      _       / "=,   "=__=")
  \\ \\/        >,_  (X)   _,<     "*==-==*"
  (__)     _="      "       "=_
   ""     /                    \\
         /                      \\
        ,           _            ,
        ;          (X)           ;
        ;           "            ;
         \\                      /
          =                    =
           ",                ,"
 __,-------._ >=,        ,=<'_.---,,___

EOF
        echo "\033[0m" >&2
		if ! is_super_user
		then
	        exit 42
		fi
    fi # }}}

	# Happy new-year {{{
    if [ "$( date +%d-%m )" = "31-12" ] && [ "$stage" = "prod" ]
    then
        echo "\033[40m\033[1;31m" >&2
        cat <<EOF >&2
                                                                _
 _   _                     _    _             _  _             | |
/|   |\\                    |\\   |\\            /  |\\            |_|
 |___|  _   _    _         | \\  |  _         /   |  _   _  ,_   _
 |   | / | | \\  | \\  / |   |  \\ | /_\\ / / |  \\___|//_\\ / | | ' / \\
\\|   |/\\_|/|_/_/|_/_/\\_|  \\|   \\| \\__/\\_\\_|     /| \\__/\\_|/|   \\_/
     '     |    |     /|        '              ( |
           |    |     \\|                        \\|
                                                 . ':
                                                : : .
                                                 : .
                                                [""]
                                                |  |
                                                |  |
                                                |  |
                                       :       .'--'.
                   _..-~-.._         : .:     /'.__.'\\
                 .'         '.      :    .   /        \\
               .'  .-'''''-.  '.   ,-''''-. ;          ;
              /  ,'   XII   '.  \\  |'-..-'| |   ,--.   |
             /  /     /|\\     \\  \\ | .   :| |_.',''.'._|
             | ;       |       ; | | . :  | |--'1997'--|
             | |IX     o    III| | |'-..-'| ||   | | | |
             | ;               ; | \\::::::/ ||)|/|)|)|\\|
             |  \\             /  |  '::::'  |._ ~**~ _.|
       ------|   '.   V I   ,'   |----)(----|  '-..-'  |-------
        _____j     '-.....-'     |    )(    |          |,--.
   ____/ /  /\\\\ ,-._.--------.-.-' ,-')('-. |          |\\';/
.-()___  :  |'.!,-'''/'-._  (___) (  '  '  )'-._    _.-'|;,|
'-,    \\_\\__\\',-'>-.,-._           '-....-'     ''''    '--'
  '-._       ('- '-._'-.'

EOF
        echo "\033[0m" >&2
		if ! is_super_user
		then
	        exit 42
		fi
    fi # }}}

	# Not Friday # {{{
	if [ $allowfriday -eq 0 ] && [ "$( date +%u )" = "5" ] && [ "$( date +%H )" -gt 6 ] && ! is_super_user && [ "$stage" = "prod" ]
	then
		echo "\033[41m\033[1m" >&2
		cat <<EOF >&2
┐┌┐┌┐
┘└┘└┘ ╲😨ފ
┐┌┐┌┐ ／
┘└┘└┘ノ)
┐┌┐┌┐
┘└┘└┘
┐┌┐┌┐ Sorry, it's friday 🤷
┘└┘└┘
┐┌┐┌┐
│││││
┴┴┴┴┴
EOF
		echo "\033[0m" >&2
		exit 42
	fi # }}}

#    ### TMP
#    if [ "$stage" = "prod" ] && [ $( get_user ) != "gregory" ] # && grep -qE 'pay|fusion|global/global|dating/graphql|cpg' <<< "$repo"
#    then
#		echo "\033[41m\033[1m" >&2
#		cat <<EOF >&2
#🛑 Sorry, denied. See #tech-payment
#EOF
#		echo "\033[0m" >&2
#		exit 42
#    fi

	local ssh_agent_debug_log=/tmp/git-up.ssh_agent_debug.log

	if [ ! -d "$gitdir" ]
	then
		error "WTF ? gitdir not found [$gitdir]"
		exit 14
	fi
	user_whitelist="joel florian ludovic gauthier"
	# Here we check if we are upping pay or cpg in prod if we are then we have some restrictions
	if [ "$stage" = "prod" ] &&  echo $user_whitelist | grep -vq  $( get_user ) && grep -qE 'pay|cpg' <<< "$repo"
	then
		# Force git up on pay to be done during working hours
		current_time=$(date +"%H:%M")
		am_start_time="08:30"
		am_end_time="11:30"
		pm_start_time="13:00"
		pm_end_time="17:30"
		if { [[ "$current_time" < "$am_start_time" ]] || [[ "$current_time" > "$am_end_time" && "$current_time" < "$pm_start_time" ]] || [[ "$current_time" > "$pm_end_time" ]]; };
		then
			echo "Git up prod should be done between 08:30 and 11:30 or between 13:00 and 17:30."
			exit 43
		fi

		last_commit_timestamp=`date -d "$(git log -1 --format=%cd --date=iso)" +%s`
		current_timestamp=$(date +%s)
		time_difference=$((current_timestamp - last_commit_timestamp))
		# The grep git branch stuff is to make sure the commit we want to git up
		if git branch  --contains $sync_to | grep -q -v "master" && [ $time_difference -gt 300 ];
		then
			echo "Cannot git up $sync_to since the commit is not in the master branch of pay"
			exit 42
		fi
	fi

	# Get deployment vars
	local inventory=$( get_stage_var inventory )
	local rsync_module=$( get_stage_var rsync_module )
	local rsync_pwfile=$( get_stage_var rsync_password )
	local user=$( get_stage_var user )
	local master=$( get_stage_var master )
	local servers=$( get_stage_var servers )
	local mutualized=$( get_stage_var mutualized )
	local use_ssh_agent=$( get_stage_var use_ssh_agent )

	# use inventory script if available
	local oldmaster="$master"
	if [ -n "$inventory" ]
	then
		debug "inventory=$inventory"
		# Replace REPOSITORY and STAGE parameters
		#for i in $( seq 1 ${#inventory[@]} )
		#do
		#	inventory[$i]="$( echo "${inventory[$i]}" | sed "s/REPOSITORY/$repo/; s/STAGE/$stage/;" )"
		#done
		inventory="$( echo "$inventory" | sed "s#REPOSITORY#$repo#; s#STAGE#$stage#;" )"
		local inventory_script=$( echo "$inventory" | cut -d" " -f1 )

		if [ -x "$inventory_script" ]
		then
			debug "Call inventory script $inventory'"
			eval $( $inventory )
		elif [ -e "$inventory" ]
		then
			debug "Parse inventory hostfile $inventory"
			parse_ansible_hostfile $inventory
		else
			error "Inventory $inventory_script not found."
			exit 15
		fi
	fi

	# override master if it is forced in config file
	if [ -n "$oldmaster" ]
	then
		master="$oldmaster"
	fi

	local before=$( git rev-parse HEAD )

	# OK, then checkout repository to what we want
	provision
	debug "Checkout to $sync_to"
	git checkout $( test $debug -eq 0 && echo -q ) -f $sync_to

	# Fix permissions
	if [ $fix_permissions -gt 0 ]
	then
		debug "fix permissions in $gitdir"
		#find $gitdir -type f -print0 | xargs -0 chmod ug+r
		find $gitdir -type d -print0 | xargs -0 chmod u=rwx,g=rwxs
	fi


	local after=$( git rev-parse HEAD )

	if [ "$before" != "$after" ]
	then
		echo
		msg "DIFF between <$before> and <$after>"
		git whatchanged --stat --format="%n%Cred author : %an --- %Cgreen date :  %ad%n %h - %s %Creset" $before..$after
		git whatchanged --stat --format="%n%Cred author : %an --- %Cgreen date :  %ad%n %h - %s %Creset" $after..$before
		echo
	fi

	local deploymsg=
	if [ -n "$GITUPVERSION" ] && [ $GITUPVERSION -gt 1 ]
	then
		deploymsg="$(</dev/stdin)"
	fi
	debug "Deploymsg: ##$deploymsg##"

	if [ ${#deploymsg} -lt $minimum_deploy_message_size ] &&  [ "$stage" = "prod" ] && echo $user_whitelist | grep -vq  $( get_user )
	then
		rm $lockfile
		echo "Deploy message error\n$deploymsg\nMessage is too short (minimum 20 characters)"
		exit 32
	fi

	hook "pre_deploy" $before $after $( get_user ) "$deploymsg"
	local_hook "pre-deploy" $before $after $( get_user ) $sync_to "$deploymsg"

	if [ -z "$master" ]
	then
		error "Master not found. This repository maybe not set for deployment."
		exit 16
	fi

	if [ -z "$rsync_dir" ]
	then
		rsync_dir=$destination_dir
	fi

	msg "📦 Delivering $repo to $stage on $sync_to ..."
	local sync_cmd="./git-deploy.pl
--repo=$repo
--stage=$stage
--source-dir=$gitdir
--rsync-module=$rsync_module
--rsync-password=$rsync_pwfile
--rsync-user=$user
--rsync-dir=$rsync_dir
--master=$master
--before=$before
--after=$after"

	if [ $debug -gt 0 ]
	then
		sync_cmd="$sync_cmd
--debug"
	fi

	if [ $quick -gt 0 ]
	then
		sync_cmd="$sync_cmd
--quick"
	fi

	debug "mutualized=$mutualized"
	if [ $mutualized -gt 0 ]
	then
		sync_cmd="$sync_cmd
--mutu"
	fi

	if [ -n "$servers" ]
	then
		sync_cmd="$sync_cmd
--servers=$servers"
	fi

	local tags=$( echo -n "$deploymsg" | grep -Eo '#(\w+)' | tr "\n" "," )
	if [ -n "$tags" ]
	then
		sync_cmd="$sync_cmd
--tags=$tags"
	fi

	if [ $use_ssh_agent -gt 0 ]
	then
		eval $( ssh-agent ) >>$ssh_agent_debug_log
		if [ -n "$ssh_key" ]
		then
			ssh-add ~/.ssh/$ssh_key 2>>$ssh_agent_debug_log
		else
			ssh-add 2>>$ssh_agent_debug_log
		fi
	fi

	debug "$sync_cmd"
	if echo "$deploymsg" | $sync_cmd 2>&1
	then
		notify_deploy "$repo" "$stage" $( get_user ) $master $before $after $sync_to "$deploymsg"
		hook "post_deploy" $before $after $( get_user )
        echo "\033[40m\033[1;34m💫✨✨✨✨✨   Deployed successfully at $( date -R )  ✨✨✨✨✨💫 \033[0m" >&2
		cleanup
	else
		cleanup
		# error "FAILED        (╥﹏╥)"
		errorfaces=("(╥﹏╥)" "凸( ͡° ͜ʖ ͡°)凸" "( ཀ ʖ̯ ཀ)" "´༎ຶ ͜ʖ ༎ຶ \`" "( ͡⚆ ͜ʖ ͡⚆)╭∩╮" "¯\\_(° ͜ʖ °)_/¯" "乁( ⁰͡ Ĺ̯ ⁰͡ ) ㄏ" "( ͡ಠ ʖ̯ ͡ಠ)")
		selectedface=${errorfaces[$RANDOM % ${#errorfaces[@]} ]}
		error "😱😱😱 FAILED     $selectedface"
		exit 3
	fi

	if [ $use_ssh_agent -gt 0 ]
	then
		eval $( ssh-agent -k ) >>$ssh_agent_debug_log
	fi
	return 0
}

#
# MAIN
#
#if [ -n "$SSH_ORIGINAL_COMMAND" ]
#then
#	ssh_orig_cmd_first_arg_removed=0
#	for arg in $SSH_ORIGINAL_COMMAND
#	do
#		if [ "$arg" == "up" ] && [ "$ssh_orig_cmd_first_arg_removed" -eq 0 ]
#		then
#			# skip first "up" from the command
#			ssh_orig_cmd_first_arg_removed=1
#		else
#			set -- "$@" "$arg"
#		fi
#	done
#fi

while [ $# -gt 0 ]
do
	case "$1" in
		test)
			exit 0
			;;
		up)
			;;
		autotag)
			shift
			exec ../bin/autotag.pl --nofetch --short $@
			;;
		update)
			do_update
			;;
		infos)
			do_infos
			;;
		sync)
			shift
			sync_to="$1"
			do_sync
			;;
		--debug)
			debug=1
			debug "Call $0 $@"
			;;
		--quick)
			quick=1
			;;
		--init)
			shift
			commitish="$1"
			;;
		--guess)
			shift
			do_guess $@
			;;
		--remote)
			shift
			remote="$1"
			debug "Set remote = $1"
			;;
		--user)
			shift
			deployuser="$1"
			debug "Set deployuser = $1"
			;;
		--*)
			warn "Unknown parameter: $1"
			;;
		*)
			if [ -z "$repo" ]
			then
				repo="${1%%.git}"
			elif [ -z "$stage" ]
			then
				stage="$1"
			else
				echo "You are not supposed to do that, go away !"
				exit 42
			fi
			;;
	esac
	shift
done

# TODO:
# - check that sync_to is in the future
#   else, use --force
